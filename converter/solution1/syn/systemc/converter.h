// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _converter_HH_
#define _converter_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "converter_fmul_32bkb.h"

namespace ap_rtl {

struct converter : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > in_V_TDATA;
    sc_in< sc_logic > in_V_TVALID;
    sc_out< sc_logic > in_V_TREADY;
    sc_out< sc_lv<32> > out_V_TDATA;
    sc_out< sc_logic > out_V_TVALID;
    sc_in< sc_logic > out_V_TREADY;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    converter(sc_module_name name);
    SC_HAS_PROCESS(converter);

    ~converter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    converter_fmul_32bkb<1,4,32,32,32>* converter_fmul_32bkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > in_V_0_data_out;
    sc_signal< sc_logic > in_V_0_vld_in;
    sc_signal< sc_logic > in_V_0_vld_out;
    sc_signal< sc_logic > in_V_0_ack_in;
    sc_signal< sc_logic > in_V_0_ack_out;
    sc_signal< sc_lv<32> > in_V_0_payload_A;
    sc_signal< sc_lv<32> > in_V_0_payload_B;
    sc_signal< sc_logic > in_V_0_sel_rd;
    sc_signal< sc_logic > in_V_0_sel_wr;
    sc_signal< sc_logic > in_V_0_sel;
    sc_signal< sc_logic > in_V_0_load_A;
    sc_signal< sc_logic > in_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_0_state;
    sc_signal< sc_logic > in_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > out_V_1_data_out;
    sc_signal< sc_logic > out_V_1_vld_in;
    sc_signal< sc_logic > out_V_1_vld_out;
    sc_signal< sc_logic > out_V_1_ack_in;
    sc_signal< sc_logic > out_V_1_ack_out;
    sc_signal< sc_lv<32> > out_V_1_payload_A;
    sc_signal< sc_lv<32> > out_V_1_payload_B;
    sc_signal< sc_logic > out_V_1_sel_rd;
    sc_signal< sc_logic > out_V_1_sel_wr;
    sc_signal< sc_logic > out_V_1_sel;
    sc_signal< sc_logic > out_V_1_load_A;
    sc_signal< sc_logic > out_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_1_state;
    sc_signal< sc_logic > out_V_1_state_cmp_full;
    sc_signal< sc_logic > in_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > out_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > p_Result_s_reg_241;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_p_Result_s_reg_241;
    sc_signal< sc_lv<23> > loc_V_1_fu_113_p1;
    sc_signal< sc_lv<23> > loc_V_1_reg_246;
    sc_signal< sc_lv<9> > sh_assign_fu_121_p2;
    sc_signal< sc_lv<9> > sh_assign_reg_251;
    sc_signal< sc_lv<1> > isNeg_reg_256;
    sc_signal< sc_lv<8> > tmp_5_i_i_i_fu_135_p2;
    sc_signal< sc_lv<8> > tmp_5_i_i_i_reg_262;
    sc_signal< sc_lv<24> > tmp_6_fu_209_p3;
    sc_signal< sc_lv<24> > tmp_6_reg_267;
    sc_signal< sc_lv<32> > tmp1_fu_227_p3;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<32> > grp_fu_85_p2;
    sc_signal< sc_lv<32> > p_Val2_s_fu_91_p1;
    sc_signal< sc_lv<8> > loc_V_fu_103_p4;
    sc_signal< sc_lv<9> > tmp_i_i_i_i_cast1_fu_117_p1;
    sc_signal< sc_lv<25> > tmp_3_i_i_i_fu_141_p4;
    sc_signal< sc_lv<9> > tmp_5_i_i_i_cast_fu_154_p1;
    sc_signal< sc_lv<9> > sh_assign_1_fu_157_p3;
    sc_signal< sc_lv<32> > sh_assign_1_cast_fu_163_p1;
    sc_signal< sc_lv<25> > sh_assign_1_cast_cas_fu_167_p1;
    sc_signal< sc_lv<79> > tmp_3_i_i_i_cast2_fu_150_p1;
    sc_signal< sc_lv<79> > tmp_7_i_i_i_fu_171_p1;
    sc_signal< sc_lv<25> > tmp_8_i_i_i_fu_175_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_187_p3;
    sc_signal< sc_lv<79> > tmp_i_i_i_fu_181_p2;
    sc_signal< sc_lv<24> > tmp_4_fu_195_p1;
    sc_signal< sc_lv<24> > tmp_5_fu_199_p4;
    sc_signal< sc_lv<24> > tmp_3_fu_216_p2;
    sc_signal< sc_lv<24> > converted_V_fu_221_p3;
    sc_signal< sc_logic > grp_fu_85_ce;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_4AFFFFFE;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<9> ap_const_lv9_181;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_converted_V_fu_221_p3();
    void thread_grp_fu_85_ce();
    void thread_in_V_0_ack_in();
    void thread_in_V_0_ack_out();
    void thread_in_V_0_data_out();
    void thread_in_V_0_load_A();
    void thread_in_V_0_load_B();
    void thread_in_V_0_sel();
    void thread_in_V_0_state_cmp_full();
    void thread_in_V_0_vld_in();
    void thread_in_V_0_vld_out();
    void thread_in_V_TDATA_blk_n();
    void thread_in_V_TREADY();
    void thread_loc_V_1_fu_113_p1();
    void thread_loc_V_fu_103_p4();
    void thread_out_V_1_ack_in();
    void thread_out_V_1_ack_out();
    void thread_out_V_1_data_out();
    void thread_out_V_1_load_A();
    void thread_out_V_1_load_B();
    void thread_out_V_1_sel();
    void thread_out_V_1_state_cmp_full();
    void thread_out_V_1_vld_in();
    void thread_out_V_1_vld_out();
    void thread_out_V_TDATA();
    void thread_out_V_TDATA_blk_n();
    void thread_out_V_TVALID();
    void thread_p_Val2_s_fu_91_p1();
    void thread_sh_assign_1_cast_cas_fu_167_p1();
    void thread_sh_assign_1_cast_fu_163_p1();
    void thread_sh_assign_1_fu_157_p3();
    void thread_sh_assign_fu_121_p2();
    void thread_tmp1_fu_227_p3();
    void thread_tmp_3_fu_216_p2();
    void thread_tmp_3_i_i_i_cast2_fu_150_p1();
    void thread_tmp_3_i_i_i_fu_141_p4();
    void thread_tmp_4_fu_195_p1();
    void thread_tmp_5_fu_199_p4();
    void thread_tmp_5_i_i_i_cast_fu_154_p1();
    void thread_tmp_5_i_i_i_fu_135_p2();
    void thread_tmp_6_fu_209_p3();
    void thread_tmp_7_i_i_i_fu_171_p1();
    void thread_tmp_8_fu_187_p3();
    void thread_tmp_8_i_i_i_fu_175_p2();
    void thread_tmp_i_i_i_fu_181_p2();
    void thread_tmp_i_i_i_i_cast1_fu_117_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
