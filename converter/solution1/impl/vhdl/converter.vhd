-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity converter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of converter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "converter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.020333,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=770,HLS_SYN_LUT=832}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4AFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "01001010111111111111111111111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_vld_in : STD_LOGIC;
    signal in_V_0_vld_out : STD_LOGIC;
    signal in_V_0_ack_in : STD_LOGIC;
    signal in_V_0_ack_out : STD_LOGIC;
    signal in_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_0_sel : STD_LOGIC;
    signal in_V_0_load_A : STD_LOGIC;
    signal in_V_0_load_B : STD_LOGIC;
    signal in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_0_state_cmp_full : STD_LOGIC;
    signal out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_vld_in : STD_LOGIC;
    signal out_V_1_vld_out : STD_LOGIC;
    signal out_V_1_ack_in : STD_LOGIC;
    signal out_V_1_ack_out : STD_LOGIC;
    signal out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_1_sel : STD_LOGIC;
    signal out_V_1_load_A : STD_LOGIC;
    signal out_V_1_load_B : STD_LOGIC;
    signal out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_1_state_cmp_full : STD_LOGIC;
    signal in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal p_Result_s_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_p_Result_s_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_1_fu_113_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_246 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_fu_121_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_251 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_256 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_fu_135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_i_i_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_209_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_reg_267 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp1_fu_227_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_91_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_103_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast1_fu_117_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_i_i_i_fu_141_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_i_i_i_cast_fu_154_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_157_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_167_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_3_i_i_i_cast2_fu_150_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_7_i_i_i_fu_171_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_8_i_i_i_fu_175_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_181_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_4_fu_195_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_199_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_216_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal converted_V_fu_221_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_85_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component converter_fmul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    converter_fmul_32bkb_U1 : component converter_fmul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_V_0_data_out,
        din1 => ap_const_lv32_4AFFFFFE,
        ce => grp_fu_85_ce,
        dout => grp_fu_85_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_0_ack_out) and (ap_const_logic_1 = in_V_0_vld_out))) then 
                                        in_V_0_sel_rd <= not(in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_in))) then 
                                        in_V_0_sel_wr <= not(in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_0_vld_in) and (in_V_0_state = ap_const_lv2_2)))) then 
                    in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_0 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_1)))) then 
                    in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_V_0_vld_in) and (in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_1)) or ((in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_0 = in_V_0_ack_out))) and not(((ap_const_logic_0 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_out)))))) then 
                    in_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_logic_1 = out_V_1_vld_out))) then 
                                        out_V_1_sel_rd <= not(out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_in))) then 
                                        out_V_1_sel_wr <= not(out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)) or ((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)) or ((ap_const_lv2_3 = out_V_1_state) and not(((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out)))))) then 
                    out_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter5_p_Result_s_reg_241 <= p_Result_s_reg_241;
                isNeg_reg_256 <= sh_assign_fu_121_p2(8 downto 8);
                loc_V_1_reg_246 <= loc_V_1_fu_113_p1;
                p_Result_s_reg_241 <= p_Val2_s_fu_91_p1(31 downto 31);
                sh_assign_reg_251 <= sh_assign_fu_121_p2;
                tmp_5_i_i_i_reg_262 <= tmp_5_i_i_i_fu_135_p2;
                tmp_6_reg_267 <= tmp_6_fu_209_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_0_load_A)) then
                in_V_0_payload_A <= in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_0_load_B)) then
                in_V_0_payload_B <= in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_A)) then
                out_V_1_payload_A <= tmp1_fu_227_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_B)) then
                out_V_1_payload_B <= tmp1_fu_227_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(in_V_0_vld_out, out_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = in_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = out_V_1_ack_in)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(in_V_0_vld_out, out_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = in_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = out_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = out_V_1_ack_in)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(in_V_0_vld_out, out_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = in_V_0_vld_out)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = out_V_1_ack_in)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = out_V_1_ack_in)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = in_V_0_vld_out);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter7_assign_proc : process(out_V_1_ack_in)
    begin
                ap_block_state8_pp0_stage0_iter7 <= (ap_const_logic_0 = out_V_1_ack_in);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_const_logic_1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    converted_V_fu_221_p3 <= 
        tmp_3_fu_216_p2 when (ap_reg_pp0_iter5_p_Result_s_reg_241(0) = '1') else 
        tmp_6_reg_267;

    grp_fu_85_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_85_ce <= ap_const_logic_1;
        else 
            grp_fu_85_ce <= ap_const_logic_0;
        end if; 
    end process;

    in_V_0_ack_in <= in_V_0_state(1);

    in_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            in_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_0_data_out_assign_proc : process(in_V_0_payload_A, in_V_0_payload_B, in_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_V_0_sel)) then 
            in_V_0_data_out <= in_V_0_payload_B;
        else 
            in_V_0_data_out <= in_V_0_payload_A;
        end if; 
    end process;

    in_V_0_load_A <= (in_V_0_state_cmp_full and not(in_V_0_sel_wr));
    in_V_0_load_B <= (in_V_0_sel_wr and in_V_0_state_cmp_full);
    in_V_0_sel <= in_V_0_sel_rd;
    in_V_0_state_cmp_full <= '0' when (in_V_0_state = ap_const_lv2_1) else '1';
    in_V_0_vld_in <= in_V_TVALID;
    in_V_0_vld_out <= in_V_0_state(0);

    in_V_TDATA_blk_n_assign_proc : process(in_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            in_V_TDATA_blk_n <= in_V_0_state(0);
        else 
            in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_TREADY <= in_V_0_state(1);
    loc_V_1_fu_113_p1 <= p_Val2_s_fu_91_p1(23 - 1 downto 0);
    loc_V_fu_103_p4 <= p_Val2_s_fu_91_p1(30 downto 23);
    out_V_1_ack_in <= out_V_1_state(1);
    out_V_1_ack_out <= out_V_TREADY;

    out_V_1_data_out_assign_proc : process(out_V_1_payload_A, out_V_1_payload_B, out_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_1_sel)) then 
            out_V_1_data_out <= out_V_1_payload_B;
        else 
            out_V_1_data_out <= out_V_1_payload_A;
        end if; 
    end process;

    out_V_1_load_A <= (out_V_1_state_cmp_full and not(out_V_1_sel_wr));
    out_V_1_load_B <= (out_V_1_sel_wr and out_V_1_state_cmp_full);
    out_V_1_sel <= out_V_1_sel_rd;
    out_V_1_state_cmp_full <= '0' when (out_V_1_state = ap_const_lv2_1) else '1';

    out_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            out_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_1_vld_out <= out_V_1_state(0);
    out_V_TDATA <= out_V_1_data_out;

    out_V_TDATA_blk_n_assign_proc : process(out_V_1_state, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6)) or ((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7)))) then 
            out_V_TDATA_blk_n <= out_V_1_state(1);
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TVALID <= out_V_1_state(0);
    p_Val2_s_fu_91_p1 <= grp_fu_85_p2;
        sh_assign_1_cast_cas_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_157_p3),25));

        sh_assign_1_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_157_p3),32));

    sh_assign_1_fu_157_p3 <= 
        tmp_5_i_i_i_cast_fu_154_p1 when (isNeg_reg_256(0) = '1') else 
        sh_assign_reg_251;
    sh_assign_fu_121_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast1_fu_117_p1));
    tmp1_fu_227_p3 <= (converted_V_fu_221_p3 & ap_const_lv8_0);
    tmp_3_fu_216_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(tmp_6_reg_267));
    tmp_3_i_i_i_cast2_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_i_i_fu_141_p4),79));
    tmp_3_i_i_i_fu_141_p4 <= ((ap_const_lv1_1 & loc_V_1_reg_246) & ap_const_lv1_0);
    tmp_4_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_187_p3),24));
    tmp_5_fu_199_p4 <= tmp_i_i_i_fu_181_p2(47 downto 24);
        tmp_5_i_i_i_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_i_reg_262),9));

    tmp_5_i_i_i_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_103_p4));
    tmp_6_fu_209_p3 <= 
        tmp_4_fu_195_p1 when (isNeg_reg_256(0) = '1') else 
        tmp_5_fu_199_p4;
    tmp_7_i_i_i_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_163_p1),79));
    tmp_8_fu_187_p3 <= tmp_8_i_i_i_fu_175_p2(24 downto 24);
    tmp_8_i_i_i_fu_175_p2 <= std_logic_vector(shift_right(unsigned(tmp_3_i_i_i_fu_141_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_167_p1(25-1 downto 0)))));
    tmp_i_i_i_fu_181_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_i_i_i_cast2_fu_150_p1),to_integer(unsigned('0' & tmp_7_i_i_i_fu_171_p1(31-1 downto 0)))));
    tmp_i_i_i_i_cast1_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_103_p4),9));
end behav;
